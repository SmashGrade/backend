basePath: /v1
definitions:
  error.ApiError:
    properties:
      msg:
        type: string
      status:
        type: integer
    type: object
  gorm.DeletedAt:
    properties:
      time:
        type: string
      valid:
        description: Valid is true if Time is not NULL
        type: boolean
    type: object
  models.Course:
    properties:
      created:
        type: string
      deleted:
        $ref: '#/definitions/gorm.DeletedAt'
      description:
        type: string
      exams:
        items:
          $ref: '#/definitions/models.Exam'
        type: array
      id:
        type: integer
      modules:
        items:
          $ref: '#/definitions/models.Module'
        type: array
      number:
        type: string
      selectedCourses:
        items:
          $ref: '#/definitions/models.SelectedCourse'
        type: array
      teachedBy:
        items:
          $ref: '#/definitions/models.User'
        type: array
      updated:
        type: string
      version:
        type: integer
    type: object
  models.Curriculum:
    properties:
      created:
        type: string
      curriculumType:
        $ref: '#/definitions/models.Curriculumtype'
      deleted:
        $ref: '#/definitions/gorm.DeletedAt'
      description:
        type: string
      endValidity:
        type: string
      focus:
        $ref: '#/definitions/models.Focus'
      id:
        type: integer
      modules:
        items:
          $ref: '#/definitions/models.Module'
        type: array
      startvalidity:
        type: string
      state:
        $ref: '#/definitions/models.State'
      updated:
        type: string
    type: object
  models.Curriculumtype:
    properties:
      created:
        type: string
      deleted:
        $ref: '#/definitions/gorm.DeletedAt'
      description:
        type: string
      durationYears:
        type: integer
      id:
        type: integer
      updated:
        type: string
    type: object
  models.Evaluationtype:
    properties:
      code:
        type: string
      created:
        type: string
      deleted:
        $ref: '#/definitions/gorm.DeletedAt'
      description:
        type: string
      id:
        type: integer
      updated:
        type: string
    type: object
  models.Exam:
    properties:
      course:
        $ref: '#/definitions/models.Course'
      courseId:
        type: integer
      courseVersion:
        type: integer
      created:
        type: string
      deleted:
        $ref: '#/definitions/gorm.DeletedAt'
      description:
        type: string
      examtype:
        $ref: '#/definitions/models.Examtype'
      id:
        type: integer
      updated:
        type: string
      weighting:
        type: number
    type: object
  models.Examtype:
    properties:
      created:
        type: string
      deleted:
        $ref: '#/definitions/gorm.DeletedAt'
      description:
        type: string
      id:
        type: integer
      updated:
        type: string
    type: object
  models.Field:
    properties:
      created:
        type: string
      deleted:
        $ref: '#/definitions/gorm.DeletedAt'
      description:
        type: string
      id:
        type: integer
      updated:
        type: string
      users:
        items:
          $ref: '#/definitions/models.User'
        type: array
    type: object
  models.Focus:
    properties:
      created:
        type: string
      deleted:
        $ref: '#/definitions/gorm.DeletedAt'
      description:
        type: string
      field:
        $ref: '#/definitions/models.Field'
      id:
        type: integer
      updated:
        type: string
    type: object
  models.Gradetype:
    properties:
      created:
        type: string
      deleted:
        $ref: '#/definitions/gorm.DeletedAt'
      description:
        type: string
      id:
        type: integer
      updated:
        type: string
    type: object
  models.MetaCourse:
    properties:
      examtypes:
        items:
          $ref: '#/definitions/models.Examtype'
        type: array
      modules:
        items:
          $ref: '#/definitions/models.Module'
        type: array
      teachers:
        items:
          $ref: '#/definitions/models.User'
        type: array
    type: object
  models.MetaCurriculums:
    properties:
      curriculumtypes:
        items:
          $ref: '#/definitions/models.Curriculumtype'
        type: array
      fields:
        items:
          $ref: '#/definitions/models.Field'
        type: array
      focuses:
        items:
          $ref: '#/definitions/models.Focus'
        type: array
      teachers:
        items:
          $ref: '#/definitions/models.User'
        type: array
    type: object
  models.MetaModules:
    properties:
      courses:
        items:
          $ref: '#/definitions/models.Course'
        type: array
      curriculums:
        items:
          $ref: '#/definitions/models.Curriculum'
        type: array
      curriculumtypes:
        items:
          $ref: '#/definitions/models.Curriculumtype'
        type: array
      evaluationtype:
        items:
          $ref: '#/definitions/models.Evaluationtype'
        type: array
    type: object
  models.Module:
    properties:
      courses:
        items:
          $ref: '#/definitions/models.Course'
        type: array
      created:
        type: string
      curriculums:
        items:
          $ref: '#/definitions/models.Curriculum'
        type: array
      deleted:
        $ref: '#/definitions/gorm.DeletedAt'
      description:
        type: string
      evaluationType:
        $ref: '#/definitions/models.Evaluationtype'
      id:
        type: integer
      number:
        type: string
      state:
        $ref: '#/definitions/models.State'
      studyStage:
        $ref: '#/definitions/models.StudyStage'
      updated:
        type: string
      version:
        type: integer
    type: object
  models.Role:
    properties:
      claim:
        type: string
      created:
        type: string
      deleted:
        $ref: '#/definitions/gorm.DeletedAt'
      description:
        type: string
      id:
        type: integer
      updated:
        type: string
      users:
        items:
          $ref: '#/definitions/models.User'
        type: array
    type: object
  models.SelectedCourse:
    properties:
      classStartYear:
        type: string
      courseId:
        type: integer
      courseVersion:
        type: integer
      dispensed:
        type: boolean
      userId:
        type: integer
    type: object
  models.State:
    properties:
      created:
        type: string
      deleted:
        $ref: '#/definitions/gorm.DeletedAt'
      description:
        type: string
      id:
        type: integer
      moduleID:
        type: integer
      updated:
        type: string
    type: object
  models.StudentCurriculums:
    type: object
  models.StudyStage:
    properties:
      created:
        type: string
      deleted:
        $ref: '#/definitions/gorm.DeletedAt'
      description:
        type: string
      id:
        type: integer
      moduleID:
        type: integer
      updated:
        type: string
    type: object
  models.TeacherCourses:
    type: object
  models.User:
    properties:
      classStartYear:
        type: string
      created:
        type: string
      deleted:
        $ref: '#/definitions/gorm.DeletedAt'
      email:
        type: string
      fields:
        items:
          $ref: '#/definitions/models.Field'
        type: array
      id:
        type: integer
      name:
        type: string
      roles:
        items:
          $ref: '#/definitions/models.Role'
        type: array
      selectedCourses:
        items:
          $ref: '#/definitions/models.SelectedCourse'
        type: array
      teachesCourses:
        items:
          $ref: '#/definitions/models.Course'
        type: array
      updated:
        type: string
    type: object
  requestmodels.RefCourse:
    properties:
      description:
        type: string
      exams:
        items:
          $ref: '#/definitions/requestmodels.RefId'
        type: array
      id:
        type: integer
      modules:
        items:
          $ref: '#/definitions/requestmodels.RefVersioned'
        type: array
      number:
        type: string
      selectedCourses:
        items:
          $ref: '#/definitions/requestmodels.RefSelectedCourse'
        type: array
      teachedBy:
        items:
          $ref: '#/definitions/requestmodels.RefId'
        type: array
      version:
        type: integer
    type: object
  requestmodels.RefId:
    properties:
      id:
        type: integer
    type: object
  requestmodels.RefSelectedCourse:
    properties:
      classStartYear:
        type: string
      courseId:
        type: integer
      courseVersion:
        type: integer
      dispensed:
        type: boolean
      userId:
        type: integer
    type: object
  requestmodels.RefVersioned:
    properties:
      id:
        type: integer
      version:
        type: integer
    type: object
host: api.smashgrade.ch
info:
  contact:
    name: HFTM Grenchen
    url: https://www.hftm.ch
  description: Backend API for Smashgrade, a web application for tracking your student
    grades.
  license:
    name: Affero General Public License
    url: https://www.gnu.org/licenses/agpl-3.0.html
  termsOfService: http://swagger.io/terms/
  title: Smashgrade Backend API
  version: "1.0"
paths:
  /courses:
    get:
      description: Get all courses
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Course'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/error.ApiError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/error.ApiError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/error.ApiError'
      security:
      - Bearer: []
      summary: Get all courses
      tags:
      - courses
    post:
      consumes:
      - application/json
      description: Create a course
      parameters:
      - description: request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/requestmodels.RefCourse'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Course'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/error.ApiError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/error.ApiError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/error.ApiError'
      security:
      - Bearer: []
      summary: Create a course
      tags:
      - courses
  /courses/{id}:
    post:
      consumes:
      - application/json
      description: Create a new version of a course
      parameters:
      - description: request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/requestmodels.RefCourse'
      - description: Course ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Course'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/error.ApiError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/error.ApiError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/error.ApiError'
      security:
      - Bearer: []
      summary: Create a new version of a course
      tags:
      - courses
  /courses/{id}/{version}:
    delete:
      consumes:
      - application/json
      description: Delete a course
      parameters:
      - description: Course ID
        in: path
        name: id
        required: true
        type: integer
      - description: Course Version
        in: path
        name: version
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/error.ApiError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/error.ApiError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/error.ApiError'
      security:
      - Bearer: []
      summary: Delete a course
      tags:
      - courses
    get:
      description: Get a specific course
      parameters:
      - description: Course ID
        in: path
        name: id
        required: true
        type: integer
      - description: Course Version
        in: path
        name: version
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Course'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/error.ApiError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/error.ApiError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/error.ApiError'
      security:
      - Bearer: []
      summary: Get a specific course
      tags:
      - courses
    put:
      consumes:
      - application/json
      description: Update a course
      parameters:
      - description: request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/requestmodels.RefCourse'
      - description: Course ID
        in: path
        name: id
        required: true
        type: integer
      - description: Course Version
        in: path
        name: version
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Course'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/error.ApiError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/error.ApiError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/error.ApiError'
      security:
      - Bearer: []
      summary: Update a course
      tags:
      - courses
  /courses/meta:
    get:
      description: Get Metadata for Course
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.MetaCourse'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/error.ApiError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/error.ApiError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/error.ApiError'
      security:
      - Bearer: []
      summary: Get Metadata for Course
      tags:
      - meta
      - courses
  /courses/teacher:
    get:
      description: Get Courses as a teacher selected by teached by userinfo from accesstoken
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.TeacherCourses'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/error.ApiError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/error.ApiError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/error.ApiError'
      security:
      - Bearer: []
      summary: Get your Courses as a teacher
      tags:
      - meta
      - courses
  /curriculums/meta:
    get:
      description: Get Metadata for Curriculums
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.MetaCurriculums'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/error.ApiError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/error.ApiError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/error.ApiError'
      security:
      - Bearer: []
      summary: Get Metadata for Curriculums
      tags:
      - meta
      - curriculums
  /curriculums/student:
    get:
      description: Get Curriculums as a student selected by userinfo from accesstoken
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.StudentCurriculums'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/error.ApiError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/error.ApiError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/error.ApiError'
      security:
      - Bearer: []
      summary: Get Curriculums as a student
      tags:
      - meta
      - curriculums
  /curriculumtypes:
    get:
      description: Get all curriculum types
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Curriculumtype'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/error.ApiError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/error.ApiError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/error.ApiError'
      security:
      - Bearer: []
      summary: Get all curriculum types
      tags:
      - curriculumtypes
  /evaluationtypes:
    get:
      description: Get all evaluation types
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Evaluationtype'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/error.ApiError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/error.ApiError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/error.ApiError'
      security:
      - Bearer: []
      summary: Get all evaluation types
      tags:
      - evaluationtypes
  /exams:
    get:
      description: Get all exams
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Exam'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/error.ApiError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/error.ApiError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/error.ApiError'
      security:
      - Bearer: []
      summary: Get all exams
      tags:
      - exams
  /exams/{id}:
    get:
      description: Get a specific exam
      parameters:
      - description: Exam ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Exam'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/error.ApiError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/error.ApiError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/error.ApiError'
      security:
      - Bearer: []
      summary: Get a specific exam
      tags:
      - exams
  /examtypes:
    get:
      description: Get all exam types
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Examtype'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/error.ApiError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/error.ApiError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/error.ApiError'
      security:
      - Bearer: []
      summary: Get all exam types
      tags:
      - examtypes
  /fields:
    get:
      description: Get all fields
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Field'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/error.ApiError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/error.ApiError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/error.ApiError'
      security:
      - Bearer: []
      summary: Get all fields
      tags:
      - fields
  /focuses:
    get:
      description: Get all focuses
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Focus'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/error.ApiError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/error.ApiError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/error.ApiError'
      security:
      - Bearer: []
      summary: Get all focuses
      tags:
      - focuses
  /gradetypes:
    get:
      description: Get all grade types
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Gradetype'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/error.ApiError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/error.ApiError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/error.ApiError'
      security:
      - Bearer: []
      summary: Get all grade types
      tags:
      - gradetypes
  /modules:
    get:
      description: Get all modules
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Module'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/error.ApiError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/error.ApiError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/error.ApiError'
      security:
      - Bearer: []
      summary: Get all modules
      tags:
      - modules
  /modules/{id}/{version}:
    get:
      description: Get a specific module
      parameters:
      - description: Module ID
        in: path
        name: id
        required: true
        type: integer
      - description: Module Version
        in: path
        name: version
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Module'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/error.ApiError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/error.ApiError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/error.ApiError'
      security:
      - Bearer: []
      summary: Get a specific module
      tags:
      - modules
  /modules/meta:
    get:
      description: Get Metadata for Module
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.MetaModules'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/error.ApiError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/error.ApiError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/error.ApiError'
      security:
      - Bearer: []
      summary: Get Metadata for Module
      tags:
      - meta
      - modules
  /states:
    get:
      description: Get all states
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.State'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/error.ApiError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/error.ApiError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/error.ApiError'
      security:
      - Bearer: []
      summary: Get all states
      tags:
      - states
  /user:
    get:
      description: Get the current user (from Bearer token)
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/error.ApiError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/error.ApiError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/error.ApiError'
      security:
      - Bearer: []
      summary: Get the current user
      tags:
      - users
securityDefinitions:
  Bearer:
    description: Type "Bearer" followed by a space and JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
